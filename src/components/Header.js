import React, { Component, Fragment } from 'react'
import { ClickAwayListener, Paper, AppBar, Toolbar, withStyles, Typography, IconButton, InputBase, Popover } from '@material-ui/core'
import SearchIcon from '@material-ui/icons/Search' 
import { fade } from '@material-ui/core/styles/colorManipulator' 
import Badge from '@material-ui/core/Badge' 
import NotificationsIcon from '@material-ui/icons/Notifications' 
import EditIcon from '@material-ui/icons/Edit'
import ExploreIcon from '@material-ui/icons/Explore'
import List from '@material-ui/core/List';
import ListItem from '@material-ui/core/ListItem';
import ListItemText from '@material-ui/core/ListItemText';
import ListSubheader from '@material-ui/core/ListSubheader';
import Avatar from '@material-ui/core/Avatar';
import {Link} from 'react-router-dom'
import FacebookLogin from 'react-facebook-login'
import { AppID } from '../constants/Common'


const styles = theme => ({
  title: {
    display: 'block',
    marginLeft: theme.spacing.unit * 0,
    [theme.breakpoints.up('md')]: {
      marginLeft: theme.spacing.unit * 6,
      marginRight: theme.spacing.unit * 9,
    },
    [theme.breakpoints.down('xs')]: {
      display: 'none'
    }
  },

  text: {
    paddingTop: theme.spacing.unit * 2,
    paddingLeft: theme.spacing.unit * 2,
    paddingRight: theme.spacing.unit * 2,
  },

  list: {
    marginBottom: theme.spacing.unit * 2,
  },
  subHeader: {
    backgroundColor: theme.palette.background.paper,
  },

  paper: {
    paddingBottom: 50,
    width: 'auto',
    [theme.breakpoints.up('sm')]: {
      width: 300,
    }
  },


  grow: {
    [theme.breakpoints.up('sm')]: {
      flexGrow: 1,
    }
  },
  search: {
    position: 'relative',
    borderRadius: theme.shape.borderRadius,
    backgroundColor: fade(theme.palette.common.white, 0.15),
    '&:hover': {
      backgroundColor: fade(theme.palette.common.white, 0.25),
    },
    marginRight: 0,
    marginLeft: 0,
    width: '32%',
    flexGrow: 1,
    [theme.breakpoints.up('sm')]: {
      marginLeft: theme.spacing.unit * 0,
      width: 'auto',
    },
  },
  searchIcon: {
    width: theme.spacing.unit * 5,
    height: '100%',
    position: 'absolute',
    pointerEvents: 'none',
    display: 'flex',
    alignItems: 'center',
    justifyContent: 'center',
    [theme.breakpoints.down('xs')]: {
      display: 'none'
    }
  },
  inputRoot: {
    color: 'inherit',
    width: '90%',
  },
  inputInput: {
    paddingTop: theme.spacing.unit,
    paddingRight: theme.spacing.unit * 3,
    paddingBottom: theme.spacing.unit,
    paddingLeft: theme.spacing.unit * 5,
    transition: theme.transitions.create('width'),
    width: '100%',
    [theme.breakpoints.up('md')]: {
      width: 200,
    },
    [theme.breakpoints.down('xs')]: {
      paddingRight: theme.spacing.unit,
      paddingLeft: theme.spacing.unit,
    }
  },
  section: {
    marginLeft: 0,
    marginRight: 0,
    [theme.breakpoints.up('md')]: {
      marginRight: theme.spacing.unit * 6,
    },
  },
})


const messages = [
  {
    id: 1,
    primary: 'Brunch this week?',
    secondary: "I'll be in the neighbourhood this week. Let's grab a bite to eat",
    person: '/static/images/avatar/5.jpg',
  },
  {
    id: 2,
    primary: 'Birthday Gift',
    secondary: `Do you have a suggestion for a good present for John on his work
      anniversary. I am really confused & would love your thoughts on it.`,
    person: '/static/images/avatar/1.jpg',
  },
  {
    id: 3,
    primary: 'Recipe to try',
    secondary: 'I am try out this new BBQ recipe, I think this might be amazing',
    person: '/static/images/avatar/2.jpg',
  },
  {
    id: 4,
    primary: 'Yes!',
    secondary: 'I have the tickets to the ReactConf for this year.',
    person: '/static/images/avatar/3.jpg',
  },
  {
    id: 5,
    primary: "Doctor's Appointment",
    secondary: 'My appointment for the doctor was rescheduled for next Saturday.',
    person: '/static/images/avatar/4.jpg',
  },
  {
    id: 6,
    primary: 'Discussion',
    secondary: `Menus that are generated by the bottom app bar (such as a bottom
      navigation drawer or overflow menu) open as bottom sheets at a higher elevation
      than the bar.`,
    person: '/static/images/avatar/5.jpg',
  },
  {
    id: 7,
    primary: 'Summer BBQ',
    secondary: `Who wants to have a cookout this weekend? I just got some furniture
      for my backyard and would love to fire up the grill.`,
    person: '/static/images/avatar/1.jpg',
  },
];

class Header extends Component {
  state = {
    anchorEl: null,
    open: false,
    isLoggedIn: this.props.user.isLoggedIn,
  }

  handleNotificationClick = event => {
    this.setState({
      anchorEl: event.currentTarget,
    });
  };

  handleNotificationClose = () => {
    this.setState({
      anchorEl: null,
    });
  };

  responseFacebook = response => {
    this.props.actions.facebookLogin({
      isLoggedIn: true,
      userID: response.userID,
      name: response.name,
      email: response.email,
      picture: response.picture.data.url
    });
  };

  componentDidMount() {
    console.log(this.props)
  }

  componentClicked = () => console.log("clicked");

  render() {
    const { classes } = this.props
    const { anchorEl } = this.state
    const { isLoggedIn } = this.props.user
    const open = Boolean(anchorEl)

    let fbContent;

    if (isLoggedIn === true) {
      fbContent = (
        <IconButton color="inherit" >
          <Avatar alt={this.props.user.name} src={this.props.user.picture} />
        </IconButton>
      );
    } else if (isLoggedIn === false) {
      fbContent = (
        <Fragment>
        <div style={{display:'none'}}>
        <FacebookLogin
          appId={AppID}
          autoLoad={true}
          fields="name,email,picture"
          onClick={this.componentClicked}
          callback={this.responseFacebook}
        />
        </div>
        <IconButton color="inherit" >
          <Avatar alt={this.props.user.name} src={this.props.user.picture} />
        </IconButton>
        </Fragment>
      );
    } else {
      fbContent = null
    }


    return (
      <Fragment>
      <AppBar>
        <Toolbar>
          {/* Phần chữ logo */}
          <Typography className={classes.title} variant="h6" color="inherit" component={Link} to='/' noWrap>
            logo
          </Typography>
          
          {/* Thanh tìm kiếm */}
          <div className={classes.grow}/>
          <div className={classes.search}>
            <div className={classes.searchIcon}>
              <SearchIcon />
            </div>
            <InputBase
              placeholder="Tìm kiếm"
              classes={{
                root: classes.inputRoot,
                input: classes.inputInput,
              }}
            />
          </div>
          <div className={classes.grow}/>
          
          {/* Menu  */}
          <div className={classes.section}>
            <IconButton color="inherit" component={Link} to= '/explore'>
              <ExploreIcon />
            </IconButton>

            <IconButton color="inherit">
                <EditIcon />
            </IconButton>
            
            <IconButton color="inherit" onClick={this.handleNotificationClick}>
              <Badge 
                invisible={true}
                badgeContent={1}
                color="secondary"
              >
                <NotificationsIcon />
              </Badge>
            </IconButton>
          {fbContent}
          </div>
        </Toolbar>
      </AppBar>
      <ClickAwayListener onClickAway={this.handleNotificationClose}>
      <Popover
        id="simple-popper"
        open={open}
        anchorEl={anchorEl}
        onClose={this.handleNotificationClose}
        anchorOrigin={{
          vertical: 'bottom',
          horizontal: 'right',
        }}
        transformOrigin={{
          vertical: 'top',
          horizontal: 'right',
        }}
        style={{height: '80vh'}}
        transition
      >
        <Paper square className={classes.paper}>
          <Typography className={classes.text} variant="h5" gutterBottom>
            Thông báo
          </Typography>
          <List className={classes.list}>
            {messages.map(({ id, primary, secondary, person }) => (
              <Fragment key={id}>
                {id === 1 && <ListSubheader className={classes.subHeader}>Hôm nay</ListSubheader>}
                {id === 3 && <ListSubheader className={classes.subHeader}>Hôm qua</ListSubheader>}
                <ListItem button>
                  <Avatar alt="Profile Picture" src={person} />
                  <ListItemText primary={primary} secondary={secondary} />
                </ListItem>
              </Fragment>
            ))}
          </List>
        </Paper>
      </Popover>
      </ClickAwayListener>
      </Fragment>
    )
  }
}

export default withStyles(styles)(Header)